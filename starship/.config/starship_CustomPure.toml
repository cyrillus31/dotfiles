# Custom PURE

format = """
[╭─ $os](blue)\
$username\
$hostname\
$directory\
$git_branch\
$git_state\
$git_status\
${custom.arcadia}\
$arcadia\
$python\
$golang\
$fill\
$cmd_duration\
$time
[╰──$character](blue)"""

# $line_break\

[directory]
format = '[\[󰝰 $path\]]($style)'
style = "blue"
truncation_length = 2
truncation_symbol = "…/"

[character]
success_symbol = "[❯](blue)"
error_symbol = "[❯](red)"
vimcmd_symbol = "[❮](green)"

[git_branch]
# _󰊢_     
symbol = ''
format = '[\[$symbol $branch\]]($style)'
# style = "bright-black"
style = "bright-yellow"

[git_status]
style = "bg:color_aqua"
format = '[[($all_status$ahead_behind )](fg:color_fg0 bg:color_aqua)]($style)'

# [git_status]
# format = '[[ (*$conflicted$untracked$modified$staged$renamed$deleted)](218) ($ahead_behind$stashed)]($style)'
# style = "cyan"
# conflicted = "​"
# untracked = "​"
# modified = "​"
# staged = "​"
# renamed = "​"
# deleted = "​"
# stashed = "≡"

[git_state]
format = '\([$state($progress_current/$progress_total)]($style)\)'
style = "bright-black"

[cmd_duration]
style = "bright-blue"
format = '[\[$duration\]]($style)'
# style = "yellow"

[python]
symbol = ""
format = '[\[$symbol $virtualenv\]]($style)'
# style = "bright-black"
style = "green"

[golang]
symbol = ''
# symbol = '󰟓 '
style = "bold cyan"
format = '[\[$symbol $version\]]($style)'

[fill]
disabled = false
# symbol = " "
symbol = '─'
style = "blue"

[time]
disabled = false
time_format = "%R"
style = "bright-black"
format = '[  $time ]($style)'

[os]
disabled = false
style = "bright-blue"
format = '[$symbol ]($style)'

[os.symbols]
Windows = "󰍲"
Ubuntu = "󰕈"
SUSE = ""
Raspbian = "󰐿"
Mint = "󰣭"
Macos = "󰀵"
Manjaro = ""
Linux = "󰌽"
Gentoo = "󰣨"
Fedora = "" # 󰣛
Alpine = ""
Amazon = ""
Android = ""
Arch = "󰣇"
Artix = "󰣇"
CentOS = ""
Debian = "󰣚"
Redhat = "󱄛"
RedHatEnterprise = "󱄛"
Kali = " "

[custom.arcadia]
# command = 'arc branch | sed -n "s/^\* //p"'
command = '''
branch=$(arc branch | sed -n "s/^\* //p")
if [[ -z $branch ]]; then
	branch="DETACHED_HEAD"
fi
echo $branch
'''
when = "arc user-info"
# when = "arc rev-parse --is-inside-work-tree > /dev/null 2>&1"
# detect_folders = [".arc"]
style = "yellow"
symbol = "󰯫 "
format = '[\[$symbol$output\]]($style)'
shell = "/bin/zsh"
ignore_timeout = true

# suggested by gpt
# command = "arc symbolic-ref --short HEAD 2>/dev/null"
